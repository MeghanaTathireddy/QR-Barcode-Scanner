# -*- coding: utf-8 -*-
"""BARCODE(detection and decoding).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jIoM6GF6SwSxD8qAJwZ6ms8nYRrQ9cad
"""

import cv2
import numpy as np
from pyzbar.pyzbar import decode
import webbrowser

# Function to decode barcodes and contour them in an image
def decode_and_contour_barcodes(image):
    barcodes = decode(image)
    barcode_info = []

    for barcode in barcodes:
        points = barcode.polygon

        if len(points) == 4:
            pts = [tuple(point) for point in points]
            cv2.polylines(image, [np.array(pts, dtype=np.int32)], isClosed=True, color=(0, 255, 0), thickness=3)
        else:
            x, y, w, h = barcode.rect
            cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 3)

        barcode_data = barcode.data.decode("utf-8")
        barcode_type = barcode.type

        barcode_info.append({
            "data": barcode_data,
            "rect": barcode.rect
        })

        text = f"{barcode_data} ({barcode_type})"
        cv2.putText(image, text, (barcode.rect[0], barcode.rect[1] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 0, 255), 2)

    return image, barcode_info

# Mouse callback function for handling clicks
def handle_click(event, x, y, flags, param):
    if event == cv2.EVENT_LBUTTONDOWN:
        barcode_info = param.get("barcode_info", [])
        if not barcode_info:
            print("No barcodes detected to handle click.")
            return
        for info in barcode_info:
            x_start, y_start, width, height = info["rect"]
            x_end, y_end = x_start + width, y_start + height

            if x_start <= x <= x_end and y_start <= y <= y_end:
                link = info["data"]
                print(f"Opening link: {link}")
                webbrowser.open(link)

# Function to capture frames from the webcam and detect barcodes in real time
def capture_and_decode_from_webcam():
    cap = cv2.VideoCapture(1)

    if not cap.isOpened():
        print("Error: Could not access the webcam.")
        return

    detection_stopped = False
    barcode_message_printed = False
    barcode_info = []  # Ensure barcode_info is initialized
    processed_frame = None  # Store the processed frame to display after stopping detection

    while True:
        ret, frame = cap.read()
        if not ret:
            print("Error: Could not read frame from the webcam.")
            break

        if not detection_stopped:
            processed_frame, barcode_info = decode_and_contour_barcodes(frame)

        # Always display the last processed frame (even after 'c' is pressed)
        cv2.imshow('Barcode Detection (Press "c" to capture, "q" to quit)', processed_frame)

        cv2.setMouseCallback('Barcode Detection (Press "c" to capture, "q" to quit)', handle_click, param={"barcode_info": barcode_info})

        key = cv2.waitKey(1) & 0xFF

        if key == ord('c'):
            if barcode_info and not barcode_message_printed:
                print("Captured Barcodes:")
                for info in barcode_info:
                    print(info)
                barcode_message_printed = True
            detection_stopped = True  # Stop detecting, but keep showing the last processed frame

        elif key == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

# Start the webcam barcode detection
capture_and_decode_from_webcam()